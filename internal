2.Maven
file>newproject>mavenArchetype>firstPOMfile>select maven archetype-quickstart>create

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>maven</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>maven</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>org.example.App</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>

src>main>java>org,example>app.java

package org.example;

public class App {
    public static void main(String[] args) {
        System.out.println("Hello, Maven!");
    }
}
 maven commands

mvn compile
mvn test
mvn package
mvn clean
mvn clean compile
mvn package
 java -jar target/maven-1.0-SNAPSHOT.jar
------------------------------------------------------------------------------------------------------------------------------------------------
2.Gradle

file>newproject>kotlin>selectgradle>kotlinDSL>select JDK17>create

build.gradle.kts
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
plugins {
    kotlin("jvm") version "1.8.10"  // Use latest stable Kotlin version
    application
}
group = "org.example"
version = "1.0-SNAPSHOT"
repositories {
    mavenCentral()
}

dependencies {
    implementation(kotlin("stdlib"))  // Kotlin Standard Library
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.2")
}

tasks.test {
    useJUnitPlatform()
}

tasks.withType<KotlinCompile> {
    kotlinOptions.jvmTarget = "17"  // Match with your JDK version
}
tasks.register<Jar>("fatJar") {
    archiveClassifier.set("all")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes["Main-Class"] = "MainKt"
    }
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
    with(tasks.jar.get() as CopySpec)
}
tasks.register("hello") {
    doLast {
        println("Hello, Usha!")
    }
}

application {
    mainClass.set("MainKt")  // Update this if using a package
}


main.kt

fun main() {
    println("Hello, Gradle with Kotlin DSL")

}

commands
 .\gradlew build
 .\gradlew run
 .\gradlew fatJar
 java -jar .\build\libs\untitled5-1.0-SNAPSHOT-all.jar

------------------------------------------------------------------------------------------------------------------------------------------
4.Application with maven,migrate the same application to gradle

file>newproject>mavenArchetype>maventogradle>select maven archetype-quickstart>create

pom
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>maven</artifactId>
  <version>1.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>maven</name>
  <url>http://maven.apache.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <archive>
            <manifest>
              <mainClass>org.example.App</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
 
src>main>java>org,example>app.java
app.java
package org.example;

public class App {
    public static void main(String[] args) {
        System.out.println("Hello, from gradle!");
    }
}

build.gradle
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    testImplementation libs.junit.junit
}

group = 'org.example'
version = '1.0-SNAPSHOT'
description = 'maven'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

commands

1. mvn clean install
2. mvn package
3. java -jar .\target\FinalMavenToGradle-1.0-SNAPSHOT.jar  
	Output- Hello from Gradle!
4. gradle init --type pom     
5. Select build script DSL:
  1: Kotlin
  2: Groovy
	Select 2
6. Generate build using new APIs and behavior (some features may change in the next minor release)? (default: no) [yes, no] 
		Yes
7. gradle clean build
8. java -jar .\target\FinalMavenToGradle-1.0-SNAPSHOT.jar
	Output â€“ Hello from Gradle!

--------------------------------------------------------------------------------------------------------------------------------------------

